#common make file for sdk and no-sdk projects

GNU_PREFIX ?= arm-none-eabi

#includes common to all targets

INC_PATHS += -I.
INC_PATHS += -I$(TEMPLATEROOT)

#sources common to all targets

vpath %.c $(TEMPLATEROOT)
vpath %.s $(TEMPLATEROOT)
vpath %.S $(TEMPLATEROOT)


# name of executable

OUTPUT_FILENAME=$(notdir $(CURDIR))
ELF=$(OUTPUT_FILENAME).elf
BIN=$(OUTPUT_FILENAME).bin
HEX=$(OUTPUT_FILENAME).hex
OUT=$(OUTPUT_FILENAME).out
LIST=$(OUTPUT_FILENAME).list


MK := mkdir
RM := rm -rf

#echo suspend
ifeq ("$(VERBOSE)","1")
NO_ECHO := 
else
NO_ECHO := @
endif

# Toolchain commands
CC              := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-gcc'
CPP             := "$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-c++"
AS              := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-as'
AR              := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-ar' -r
LD              := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-ld'
NM              := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-nm'
OBJDUMP         := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-objdump'
OBJCOPY         := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-objcopy'
SIZE            := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-size'
GDB             := '$(GNU_INSTALL_ROOT_BIN)$(GNU_PREFIX)-gdb'
OPENOCD         := '$(OPENOCDPATH_BIN)openocd'

OBJECT_DIRECTORY = _build
OUTPUT_BINARY_DIRECTORY = $(OBJECT_DIRECTORY)

# Sorting removes duplicates
BUILD_DIRECTORIES := $(sort $(OBJECT_DIRECTORY))

#assembly files common to all targets
OBJS += gcc_startup_nrf51.o

#add source dirs to vpath
SOURCE_DIRS = $(sort $(dir $(OBJS)))
vpath %.c $(SOURCE_DIRS)

#put all *.o files to OBJECT_DIRECTORY
OBJ_NAMES = $(notdir $(OBJS))

OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(OBJ_NAMES) )



#flags common to all targets
CFLAGS += -DNRF51
CFLAGS += -mcpu=cortex-m0
CFLAGS+= $(INC_PATHS)
CFLAGS += -mthumb -mabi=aapcs
CFLAGS += -Wall -Werror
CFLAGS += -mfloat-abi=soft
# keep every function in separate section. This will allow linker to dump unused functions
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CFLAGS += -fno-builtin --short-enums


# keep every function in separate section. This will allow linker to dump unused functions
LDFLAGS += -Xlinker -Map=$(OBJECT_DIRECTORY)/$(OUTPUT_FILENAME).map
LDFLAGS += -mthumb -mabi=aapcs -L$(TEMPLATE_PATH) -T$(LDSCRIPT)
LDFLAGS += -mcpu=cortex-m0
# let linker to dump unused sections
LDFLAGS += -Wl,--gc-sections
# use newlib in nano version
LDFLAGS += --specs=nano.specs -lc -lnosys

# Assembler flags
ASMFLAGS += -x assembler-with-cpp
ASMFLAGS += -DNRF51
#ASMFLAGS += -D__STACK_SIZE=2048
#ASMFLAGS += -D__HEAP_SIZE=512

#default target - first one defined
#default: clean $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX) 
default: $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX) $(OUTPUT_BINARY_DIRECTORY)/$(LIST)

#building all targets
#all: clean $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
all: $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX) $(OUTPUT_BINARY_DIRECTORY)/$(LIST)

bin: $(OUTPUT_BINARY_DIRECTORY)/$(BIN)

#target for printing all targets
help:
	@echo parameters:
	@echo output:	$(OUTPUT_FILENAME)
	@echo root:	$(TEMPLATEROOT)
	@echo sdk:	$(SDK_PATH)
	@echo nosdk:	$(NOSDK_PATH)
	@echo include dirs:	$(INC_PATHS)
	@echo source dirs:	$(SOURCE_DIRS)
	@echo obj:	$(OBJS)
	@echo objects:	$(OBJECTS)



## Create build directories
$(BUILD_DIRECTORIES):
	$(MK) $@

# Build executable 

$(OUTPUT_BINARY_DIRECTORY)/$(BIN) : $(OUTPUT_BINARY_DIRECTORY)/$(OUT)
	$(OBJCOPY) -O binary $(OUTPUT_BINARY_DIRECTORY)/$(OUT) $(OUTPUT_BINARY_DIRECTORY)/$(BIN)


$(OUTPUT_BINARY_DIRECTORY)/$(LIST): $(OUTPUT_BINARY_DIRECTORY)/$(OUT)
	@#printf "  OBJDUMP $(*).list\n"
	$(OBJDUMP) -S $(OUTPUT_BINARY_DIRECTORY)/$(OUT) > $(OUTPUT_BINARY_DIRECTORY)/$(LIST)


$(OUTPUT_BINARY_DIRECTORY)/$(HEX) : $(OUTPUT_BINARY_DIRECTORY)/$(OUT)
	$(OBJCOPY) -O ihex $(OUTPUT_BINARY_DIRECTORY)/$(OUT) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)

$(OUTPUT_BINARY_DIRECTORY)/$(OUT) : $(BUILD_DIRECTORIES) $(OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LDLIBS)

# compile and generate dependency info

$(OBJECT_DIRECTORY)/%.o: %.c
	$(CC) -c $(CFLAGS) --std=gnu99 $< -o $@

$(OBJECT_DIRECTORY)/%.o: %.s
	$(CC) -c $(ASMFLAGS) -c $< -o $@

$(OBJECT_DIRECTORY)/%.o: %.S
	$(CC) -c $(ASMFLAGS) -c $< -o $@

$(OBJECT_DIRECTORY)/%.o: %.cpp
	$(CPP) -c $(CFLAGS) $< -o $@

flash: $(OUTPUT_BINARY_DIRECTORY)/$(HEX) $(OUTPUT_BINARY_DIRECTORY)/$(LIST)
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset; exit'

flash_erase: 
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; halt; nrf51 mass_erase; reset; exit'

flash_reset: 
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; reset; exit'

flash_s110: $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; halt; nrf51 mass_erase; program $(S110_HEX_FILE) verify; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset; exit'

flash_s130: $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; halt; nrf51 mass_erase; program $(S130_HEX_FILE) verify; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset; exit'

clean:
	$(RM) $(BUILD_DIRECTORIES)

cleanobj:
	$(RM) $(BUILD_DIRECTORIES)/*.o

